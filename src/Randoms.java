/* Нужно написать класс, расширяющий Iterable<Integer>, по которому мы будем итерироваться.
В процессе итерирования мы будем от него получать случайные числа в диапазоне значений.
Диапазон задаётся двумя числами - минимальным и максимальным значениями.
Передаются они через параметры конструктора. Таким образом, итератор по объектам нашего класса будет
итерироваться по бесконечной последовательности из случайных чисел в заданом интервале
 */

import java.util.Iterator;
import java.util.Random;

// Класс, генерирующий последовательность случайных целых чисел в указанном диапазоне min-max
/* Класс Randoms реализует интерфейс Iterable, позволяющий создавать итераторы для произвольных
последовательностей элементов.
*/
        public class Randoms implements Iterable<Integer> {
    private final int minValue;
    private final int maxValue;
    // random - объект библиотеки Random, который используется для генерации случайных чисел
    protected Random random = new Random();

    // Конструктор принимает минимальное и максимальное значения диапазона
    public Randoms(int min, int max) {
        /* Обеспечиваем порядок минимального перед максимальным с помощью Math.min (если данные
        поступят в конструктор в неправильном порядке)
         */
        this.minValue = Math.min(min, max);
        this.maxValue = Math.max(min, max);
    }

    /* Метод iterator создает и возвращает новый экземпляр итератора (RandomIterator), который
    реализует поведение итератора (отвечает за получение следующего элемента в каждой итерации).
    Класс Randoms реализует интерфейс Iterable<Integer> — это означает, что объекты этого класса можно
    перебирать с использованием циклов вроде for-each.
     */
    @Override
    public Iterator<Integer> iterator() {
        return new RandomIterator(); // Возвращаем новый экземпляр внутреннего итератора
    }

    /* Внутренний класс — итератор по бесконечному потоку случайных чисел, класс доступен только
    изнутри своего родительского класса.
    Он реализует интерфейс Iterator<Integer>, что подразумевает наличие двух обязательных методов:
    hasNext() и next().
     */
    private class RandomIterator implements Iterator<Integer> {
        @Override
        public boolean hasNext() { // Всегда возвращает true, потому что итератор бесконечный. Иначе
            // говоря, у этого итератора никогда не закончится следующий элемент.
            return true;
        }

        /* Метод next() генерирует очередное случайное целое число между минимумом и максимумом,
        используя встроенную библиотеку Java (random.nextInt()).
         */
        @Override
        public Integer next() { // Генерирует новое случайное значение каждый раз
            return random.nextInt(maxValue - minValue + 1) + minValue;
        }
    }
}